const display = document.querySelector('.calculator-input');
const keys = document.querySelector('.calculator-keys');
let displayValue = '0';
let firstValue = null;
let operator = null;
let waitingForSecondValue = false;

function updateDisplay() {
    display.value = displayValue;
}

keys.addEventListener('click', function(e){
    const element = e.target;
    const value = element.value;

    if (!element.matches('button')) return;

    switch (value) {
        case '+':
        case '-':
        case '*':
        case '/':
        case '^':
            inputOperator(value);
            break;
        case '(': 
        case ')':
            inputParen(value);
            break;
        case '=':
            handleEqual();
            break;
        case '.':
            inputDecimal();
            break;
        case 'clear':
            clear();
            break;
        case 'sqrt':
            handleSqrt();
            break;
        case 'sign':
            toggleSign();
            break;
        case 'del':
            deleteLast();
            break;
        default:
            inputNumber(value);
    }
    updateDisplay();
});

function handleOperator(nextOperator) {
    const value = parseFloat(displayValue);

    if (operator && waitingForSecondValue) {
        operator = nextOperator;
        return;
    }

    if (firstValue === null){
        firstValue = value;
    } else if (operator) {
        const result = calculate(firstValue, value, operator);
        displayValue = `${parseFloat(result.toFixed(7))}`;
        firstValue = result;
    }
    waitingForSecondValue = true;
    operator = nextOperator;
    console.log(displayValue, firstValue, operator, waitingForSecondValue);
}

function calculate(first, second, operator) {
    if (operator === '+') {
        return first + second;
    }else if (operator === '-') {
        return first - second;
    } else if (operator === '*') {
        return first * second;
    } else if (operator === '/') {
        return first / second;
    }
    return second; 
}

function inputNumber(num) {
    if (waitingForSecondValue) {
        displayValue = num;
        waitingForSecondValue = false;
    }
    else {
        displayValue = displayValue === '0' ? num : displayValue + num;
    }
    console.log(displayValue, firstValue, operator, waitingForSecondValue);

}

function inputDecimal() {
    if (!displayValue.includes('.')) {
        displayValue += '.';
    }
}

function clear(){
    displayValue = '0';
    firstValue = null;
    operator = null;
    waitingForSecondValue = false;
}

// Parantez ve operatörler için yeni fonksiyonlar
function inputOperator(op) {
    if (displayValue === '0') {
        displayValue = op;
    } else {
        displayValue += op;
    }
}

function inputParen(paren) {
    if (displayValue === '0') {
        displayValue = paren;
    } else {
        displayValue += paren;
    }
}

function handleEqual() {
    try {
        // x yerine * ve ^ yerine ** kullanılmalı
        let expr = displayValue.replace(/x/g, '*').replace(/\^/g, '**');
        let result = Function('return (' + expr + ')')();
        displayValue = `${parseFloat(result.toFixed(7))}`;
    } catch (e) {
        displayValue = 'Hata';
    }
    firstValue = null;
    operator = null;
    waitingForSecondValue = false;
}

function handleSqrt() {
    try {
        let value = parseFloat(displayValue);
        if (isNaN(value) || value < 0) {
            displayValue = 'Hata';
        } else {
            displayValue = `${parseFloat(Math.sqrt(value).toFixed(7))}`;
        }
    } catch (e) {
        displayValue = 'Hata';
    }
    firstValue = null;
    operator = null;
    waitingForSecondValue = false;
}

function toggleSign() {
    if (displayValue.startsWith('-')) {
        displayValue = displayValue.substring(1);
    } else if (displayValue !== '0') {
        displayValue = '-' + displayValue;
    }
}

function deleteLast() {
    if (displayValue.length > 1) {
        displayValue = displayValue.slice(0, -1);
    } else {
        displayValue = '0';
    }
}
